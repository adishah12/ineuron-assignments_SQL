SQL Questoons set-1

Q1. Query all columns for all American cities in the CITY table with populations larger than 100000.
The CountryCode for America is USA.
ANS - SELECT * FROM CITY WHERE COUNTRYCODE='USA' AND POPULATION>100000;

Q2. Query the NAME field for all American cities in the CITY table with populations larger than 120000.
The CountryCode for America is USA.
ANS - SELECT NAME FROM CITY WHERE COUNTRYCODE='USA' AND POPULATION>120000;

Q3. Query all columns (attributes) for every row in the CITY table.
ANS - SELECT * FROM CITY;

Q4. Query all columns for a city in CITY with the ID 1661.
ANS - SELECT * FROM CITY WHERE ID=1661;

Q5. Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.
ANS - SELECT * FROM CITY WHERE COUNTRYCODE='JPN';

Q6. Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.
ANS - SELECT NAME FROM CITY WHERE COUNTRYCODE='JPN';

Q7. Query a list of CITY and STATE from the STATION table.
ANS - SELECT CITY, STATE FROM STATIONDATA;

Q8. Query a list of CITY names from STATION for cities that have an even ID number. Print the results
in any order, but exclude duplicates from the answer.
ANS - SELECT DISTINCT ID, CITY FROM STATIONDATA WHERE ID%2=0;

Q9. Find the difference between the total number of CITY entries in the table and the number of
distinct CITY entries in the table.
ANS - SELECT (COUNT(city) - COUNT(DISTINCT city)) 
AS difference FROM STATIONDATA;

Q10. Query the two cities in STATION with the shortest and longest CITY names, as well as their
respective lengths (i.e.: number of characters in the name). If there is more than one smallest or
largest city, choose the one that comes first when ordered alphabetically.
ANS - ( select CITY,
char_length(CITY) as len_city  
 from STATIONDATA  
where char_length(CITY)=(select char_length(CITY)  
from STATIONDATA
order by char_length(CITY) LIMIT 1)  
 Order by CITY LIMIT 1)  
UNION ALL  
(select CITY,
char_length(CITY) as len_city  
 from STATIONDATA  
where char_length(CITY)=(select char_length(CITY)  
from STATIONDATA
order by char_length(CITY) DESC LIMIT 1)  
 Order by CITY DESC LIMIT 1)  
 ORDER BY char_length(CITY);
 
Q11. Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result
cannot contain duplicates.
ANS - SELECT DISTINCT(CITY) FROM STATIONDATA WHERE CITY LIKE'A%'
OR CITY LIKE'E%'
OR CITY LIKE'I%'
OR CITY LIKE'O%'
OR CITY LIKE'U%' ORDER BY CITY;

Q12. Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot
contain duplicates.
ANS - SELECT DISTINCT(CITY) FROM STATIONDATA WHERE CITY LIKE'%A'
OR CITY LIKE'%E'
OR CITY LIKE'%I'
OR CITY LIKE'%O'
OR CITY LIKE'%U' ORDER BY CITY;

Q13. Query the list of CITY names from STATION that do not start with vowels. Your result cannot
contain duplicates.
ANS - SELECT DISTINCT(CITY) FROM STATIONDATA WHERE CITY NOT LIKE'A%'
OR CITY NOT LIKE'E%'
OR CITY NOT LIKE'I%'
OR CITY NOT LIKE'O%'
OR CITY NOT LIKE'U%';

Q14. Query the list of CITY names from STATION that do not end with vowels. Your result cannot
contain duplicates.
ANS - SELECT DISTINCT(CITY) FROM STATIONDATA WHERE CITY NOT LIKE'%A'
OR CITY NOT LIKE'%E'
OR CITY NOT LIKE'%I'
OR CITY NOT LIKE'%O'
OR CITY NOT LIKE'%U';

Q15. Query the list of CITY names from STATION that either do not start with vowels or do not end
with vowels. Your result cannot contain duplicates.
ANS - SELECT DISTINCT(CITY) FROM STATIONDATA WHERE CITY NOT LIKE'A%A'
OR CITY NOT LIKE'E%E'
OR CITY NOT LIKE'I%I'
OR CITY NOT LIKE'O%O'
OR CITY NOT LIKE'U%U';

Q16. Query the list of CITY names from STATION that do not start with vowels and do not end with
vowels. Your result cannot contain duplicates.
ANS - SELECT DISTINCT(CITY) FROM STATIONDATA WHERE CITY NOT LIKE'A%A'
OR CITY NOT LIKE'E%E'
OR CITY NOT LIKE'I%I'
OR CITY NOT LIKE'O%O'
OR CITY NOT LIKE'U%U';

Q.17 Write an SQL query that reports the products that were only sold in the first quarter of 2019. That is,
between 2019-01-01 and 2019-03-31 inclusive.
ANS - Table: Product
-product_id is the primary key of this table.
-Each row of this table indicates the name and the price of each product.
create table if not exists Product
(
    product_id int NOT NULL,
    product_name varchar(50),
    unit_price int,
    constraint pk PRIMARY KEY (product_id) 
);


insert into Product values(1,'S8',1000);
insert into Product values(2,'G4',800);
insert into Product values(3,'iPhone',1400);

select * from Product;

-Table: Sales
create table if not exists Sales
(
    seller_id int,
    product_id int,
    buyer_id int,
    sale_date date,
    quantity int,
    price int,
    constraint fk FOREIGN KEY (product_id) REFERENCES  Product(product_id)
);

insert into Sales values(1,1,1,'2019-01-21',2,2000);
insert into Sales values(1,2,2,'2019-02-17',1,800);
insert into Sales values(2,2,3,'2019-06-02',1,800);
insert into Sales values(3,3,4,'2019-05-13',2,2800);

select * from Sales;


-Write an SQL query that reports the products that were only sold in the first quarter of 2019. That is, between 2019-01-01 and 2019-03-31 inclusive.
-Explanation:
-The product with id 1 was only sold in the spring of 2019.
-The product with id 2 was sold in the spring of 2019 but was also sold after the spring of 2019.
-The product with id 3 was sold after spring 2019.
-We return only product 1 as it is the product that was only sold in the spring of 2019.

SELECT product_id, 
       product_name 
FROM   Product 
WHERE  product_id NOT IN (SELECT product_id 
                          FROM   Sales 
                          WHERE  sale_date NOT BETWEEN 
                                 '2019-01-01' AND '2019-03-31'); 
Q.18 Write an SQL query to find all the authors that viewed at least one of their own articles.
Return the result table sorted by id in ascending order.
ANS - create table if not exists Views
(
    article_id int,
    author_id int,
    viewer_id int,
    view_date date
);


insert into Views VALUES (1,3,5,'2019-08-01'), (1,3,6,'2019-08-02'),(2,7,7,'2019-08-01'),(2,7,6,'2019-08-02'), (4,7,1,'2019-07-22'), (3,4,4,'2019-07-21'),(3,4,4,'2019-07-21');

select * from Views;


-There is no primary key for this table, it may have duplicate rows.
-Each row of this table indicates that some viewer viewed an article (written by some author) on some date.
-Note that equal author_id and viewer_id indicate the same person.
-Write an SQL query to find all the authors that viewed at least one of their own articles.
-Return the result table sorted by id in ascending order.
-The query result format is in the following example.

select distinct author_id as id from Views where author_id = viewer_id order by author_id asc;

Q.19 Write an SQL query to find the percentage of immediate orders in the table, rounded to 2 decimal
places.
ANS - Table: Delivery
create table if not exists Delivery
(
    delivery_id int not null,
    customer_id int,
    order_date date,
    customer_pref_delivery_date date,
    constraint pk PRIMARY KEY (delivery_id)
);


insert into Delivery values (1,1,'2019-08-01','2019-08-02'),(2,5,'2019-08-02','2019-08-02'),(3,1,'2019-08-11','2019-08-11'),(4,3,'2019-08-24','2019-08-26'),(5,4,'2019-08-21','2019-08-22'),(6,2,'2019-08-11','2019-08-13');

select * from Delivery;

-The table holds information about food delivery to customers that make orders at some date and
-specify a preferred delivery date (on the same order date or after it).
-If the customer's preferred delivery date is the same as the order date, then the order is called  immediately; otherwise, it is called scheduled.
-Write an SQL query to find the percentage of immediate orders in the table, rounded to 2 decimal places.
-The query result format is in the following example.

select round(100*d2.immediate_orders/count(d1.delivery_id), 2) as immediate_percentage
from Delivery d1,
    (select count(order_date) as immediate_orders
    from Delivery 
    where (order_date = customer_pref_delivery_date)) d2;
	
Q.20 Write an SQL query to find the ctr of each Ad. Round ctr to two decimal points.
Return the result table ordered by ctr in descending order and by ad_id in ascending order in case of a tie.
ANS - Table: Ads
create table if not exists Ads
(
    ad_id int,
    user_id int,    
    action enum('Clicked', 'Viewed', 'Ignored'),
    constraint pk PRIMARY KEY (ad_id, user_id)   
);

insert into Ads VALUES (1,1,'Clicked'),(2,2,'Clicked'),(3,3,'Viewed'),(5,5,'Ignored'),(1,7,'Ignored'),(2,7,'Viewed'),(3,5,'Clicked'),(1,4,'Viewed'),(2,11,'Viewed'),(1,2,'Clicked');

select * from Ads;


-Write an SQL query to find the ctr of each Ad. Round ctr to two decimal points.
-Return the result table ordered by ctr in descending order and by ad_id in ascending order in case of a tie.

select ad_id,
ifnull(
    round(
        avg(
            case
                when action = "Clicked" then 1
                when action = "Viewed" then 0
                else null
            end
        ) * 100,
    2),
0)
as ctr
from Ads
group by ad_id
order by ctr desc, ad_id asc;

Q.21 Write an SQL query to find the team size of each of the employees.
Return result table in any order.
ANS - Table: Employee

create table if not exists Employee
(
    employee_id int,
    team_id int,
    constraint pk PRIMARY KEY (employee_id)
);


insert into Employee VALUES(1,8),(2,8),(3,8),(4,7),(5,9),(6,9);

select * from Employee;

-Write an SQL query to find the team size of each of the employees.
-Return result table in any order.
select employee_id, 
         count(*) over(partition by team_id) as team_size
from Employee order by team_size desc;

Q.22 Write an SQL query to find the type of weather in each country for November 2019.
The type of weather is:
● Cold if the average weather_state is less than or equal 15,
● Hot if the average weather_state is greater than or equal to 25, and
● Warm otherwise.
ANS - able: Countries

create table if not exists Countries
(
    country_id int not null,
    country_name varchar(50),
    constraint pk PRIMARY KEY (country_id)
);


insert into Countries VALUES (2,'USA'),(3,'Australia'),(7,'Peru'),(5,'China'),(8,'Morocco'),(9,'Spain');

select * from Countries;

--Table: Weather
create table if not exists Weather
(
    country_id int,
    weather_state int,
    day date,
    constraint pk PRIMARY KEY (country_id, day)
);

insert into Weather VALUES (2,15,'2019-11-01'),(2,12,'2019-10-28'),(2,12,'2019-10-27'),(3,-2,'2019-11-10'),(3,0,'2019-11-11'),(3,3,'2019-11-12'),(5,16,'2019-11-07'),(5,18,'2019-11-09'),(5,21,'2019-11-23'),(7,25,'2019-11-28'),(7,22,'2019-12-01'),(7,20,'2019-12-02'),(8,25,'2019-11-05'),(8,27,'2019-11-15'),(8,31,'2019-11-25'),(9,7,'2019-10-23'),(9,3,'2019-12-23');

select * from Weather;

--Write an SQL query to find the type of weather in each country for November 2019.
--The type of weather is:


select c.country_name,
                    case 
                        when AVG(w.weather_state*1.0) <= 15 then 'Cold'
                        when AVG(w.weather_state*1.0) >= 25 then 'Hot'
                        else 'Warm'
                    end as weather_type
from Countries as c
inner JOIN Weather w ON c.country_id = w.country_id 
where w.day between '2019-11-01' and '2019-11-30' 
group by c.country_id;

